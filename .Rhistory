plotx = 2:25
plotx
plotx = 2:0.1:25
plotx = seq(2,25,0.1)
plotx
Hvec = seq(6,50,1)
Gvec = seq(3,25,0.5)
y=dexp(plotx,rate = 2*G/100)
y=dexp(plotx,rate = 2*Gvec/100)
str(y)
length(plotx)
y=dexp(plotx,rate = 2*Gvec[0]/100)
str(y)
Gvec[0]
Gvec[1]
outputmat = outer(plotx, Gvec, dexp(plotx, rate = 2*Gvec/100))
outputmat = outer(plotx, Gvec, function(X, Y) dexp(X, rate = 2*Y/100))
str(outputmat)
head(outputmat)
output.df = as.data.frame(outputmat)
output.df = as.data.frame(outputmat, row.names = plotx)
output.df = as.data.frame(outputmat, row.names = str(plotx))
head(output.df)
output.df = as.data.frame(outputmat)
head(output.df)
colnames(output.df) = str(Gvec)
output.df = as.data.frame(outputmat)
colnames(output.df) = str(Gvec)
head(output.df)
output.df = as.data.frame(outputmat)
colnames(output.df) = as.character(Gvec)
head(output.df)
rownames(output.df) = as.character(plotx)
library(reshape2)
output_long = melt(output.df, value.name = "G")
head(output_long)
output_long = melt(output.df, value.name = "prob")
head(output_long)
output.df$x = plotx
colnames(output.df) = c(as.character(Gvec),x)
output.df = as.data.frame(outputmat)
output.df$x = plotx
colnames(output.df) = c(as.character(Gvec),"x")
str(output.df)
output_long = melt(output.df, id=x, value.name = "prob")
output_long = melt(output.df, id="x", value.name = "prob")
str(output_long)
colnames(output_long) = c("x","G","prob")
str(output_long)
\
qplot(x,G,color="G")
qplot(x,G,data=output_long,color="G")
qplot(x,prob,data=output_long,color="G")
qplot(x,prob,data=output_long,colour="G")
qplot(x,prob,data=output_long,colour=G)
qplot(x,prob,data=output_long,colour=G) + geom_line()
Lvec = seq(2,25,0.5)
Lvec = seq(2.5,25,0.5)
Llow = seq(2, 24.5, 0.5)
Lup = seq(2.5,25,0.5)
Gvec = seq(3,50,0.5)
#Llow = seq(2, 24.5, 0.5)
Lvec = seq(2.5,25,0.5)
outputmat = outer(Lvec, Gvec, function(X,Y) (pexp(X, rate = 2*Y/100) - pexp(X-0.5, rate = 2*Y/100)))
output.df = as.data.frame(outputmat)
output.df$L = Lvec
str(output.df)
colnames(output.df) = c(as.character(Gvec),"L")
str(output.df)
head(output.df[,46])
head(output.df[,46:48])
head(output.df[,95:96])
output.df$25up = rowSums(output.df[,46:95])
output.df$above25 = rowSums(output.df[,46:95])
new.df = output.df[,c(1:45,96,97)]
str(new.df)
new.df$tot = rowSums(output.df[,c(1:45,47)])
source('~/Documents/PhD/Phage_Infection_fitting/grind.R')
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
dW <- R*(w0 + V/(k2 + V)) - rW*W -  g*V*W/(k1 + W)
dV <- i + c*g*V*W/(k1 + W) - d*V
return(list(c(dW, dV)))
})
}
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
dW <- R*(w0 + V/(k2 + V)) - rW*W -  g*V*W/(k1 + W)
dV <- i + c*g*V*W/(k1 + W) - d*V
return(list(c(dW, dV)))
})
}
p <- c(R=2,c=10,d=0.25,g=0.05,i=0.01,k1=5,k2=5,rW=0.2,w0=0.2)
s <- c(W=5,V=100)
plane(0,10,0.01,1000,log="y")
eq1 <- newton(s,plot=T)
continue(eq1,x="d",y="P",xmin = 0, xmax = 0.5)
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
dW <- R*(w0 + P/(k2 + P)) - rW*W -  g*P*W/(k1 + W)
dP <- i + c*g*P*W/(k1 + W) - d*P
return(list(c(dW, dP)))
})
}
p <- c(R=2,c=10,d=0.25,g=0.05,i=0.01,k1=5,k2=5,rW=0.2,w0=0.2)
s <- c(W=5,P=100)
plane(0,10,0.01,1000,log="y")
eq1 <- newton(s,plot=T)
continue(eq1,x="d",y="P",xmin = 0, xmax = 0.5)
continue(eq1,x="d",y="P",xmin = 0, xmax = 0.5, log="y")
continue(eq1,x="d",y="log(P)",xmin = 0, xmax = 0.5)
continue(eq1,x="d",y="P",xmin = 0.1, xmax = 0.5)
continue(eq1,x="d",y="P",xmin = 0.1, xmax = 0.5, ymin = 0.001, ymax = 1000, log="y")
continue(eq1,x="d",y="P",xmin = 0.1, xmax = 0.5, ymin = 0.01, ymax = 1000, log="y")
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
dW <- R*(w0 + P/(k2 + P)) - rW*W -  g*P*W/(k1 + W)
dP <- c*g*P*W/(k1 + W) - d*P
return(list(c(dW, dP)))
})
}
p <- c(R=2,c=10,d=0.25,g=0.05,i=0.01,k1=5,k2=5,rW=0.2,w0=0.2)
s <- c(W=5,P=100)
plane(0,10,0.01,1000,log="y")
eq1 <- newton(s,plot=T)
continue(eq1,x="d",y="P",xmin = 0.1, xmax = 0.5)
continue(eq1,x="d",y="P",xmin = 0, xmax = 0.5)
continue(eq1,x="d",y="P",xmin = 0.1, xmax = 0.5, ymin = 0.01, ymax = 1000, log="y")
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
dW <- R*((k2*w0 + P)/(k2 + P)) - rW*W -  cmax*P*W/(k1 + W)
dP <- gmax*P*W/(k1 + W) - (d+h)*P
return(list(c(dW, dP)))
})
}
p <- c(R=2,cmax=0.05,d=0.1,gmax=0.5,h=0.15,k1=3,k2=5,rW=0.1,w0=0.2)
s <- c(W=5,P=100)
plane(0,10,0.01,1000,log="y")
eq1 <- newton(s,plot=T)
continue(eq1,x="h",y="P",xmin = 0, xmax = 0.4)
plane(0,10,0.01,1000,log="y")
eq2 <- newton(c(W=0,P=0),plot=T)
continue(eq2,x="h",y="P",xmin = 0, xmax = 0.4)
continue(eq2,x="h",y="P",xmin = 0, xmax = 0.4,ymin = -0.05)
continue(eq1,x="h",y="P",xmin = 0, xmax = 0.4,ymin = -0.05)
model <- function(t, state, parms) {
with(as.list(c(state,parms)), {
dW <- R*((k2*w0 + P)/(k2 + P)) - rW*W -  cmax*P*W/(k1 + W)
dP <- gmax*P*W/(k1 + W) - (d+h)*P
return(list(c(dW, dP)))
})
}
p <- c(R=2,cmax=0.05,d=0.2,gmax=0.5,h=0.15,k1=3,k2=5,rW=0.1,w0=0.2)
s <- c(W=5,P=100)
plane(0,10,0.01,1000,log="y")
eq1 <- newton(s,plot=T)
continue(eq1,x="h",y="P",xmin = 0, xmax = 0.4,ymin = -0.05)
continue(eq1,x="h",y="P",xmin = 0, xmax = 0.3,ymin = -0.05, ymax = 50)
continue(eq1,x="h",y="P",xmin = 0, xmax = 0.3,ymin = -0.05, ymax = 40)
eq2 <- newton(c(W=0,P=0),plot=T)
continue(eq2,x="h",y="P",xmin = 0, xmax = 0.4,ymin = -0.05)
continue(eq1,x="h",y="P",xmin = 0, xmax = 0.3,ymin = -0.05, ymax = 50)
source('~/Documents/PhD/Phage_Infection_fitting/grind.R')
data_AC = read.table("Data/reprS_Sat0_expAC.txt") # Data previously stored - avoid having to generate it all...
b = 1/(-data_AC$expAC)
setwd("~/Documents/PhD/MultiscaleSelection/Code/Scripts")
data_AC = read.table("Data/reprS_Sat0_expAC.txt") # Data previously stored - avoid having to generate it all...
b = 1/(-data_AC$expAC)
data_AC
b = 1/(-(data_AC$expAC))
data_AC = read.table("Data/reprS_Sat0_expAC.txt", header=T) # Data previously stored - avoid having to generate it all...
b = 1/(-(data_AC$expAC))
b = 1/(-data_AC$expAC)
plot(data_AC$Sat0,b,type="p",xlim=c(0,17),ylim=c(0,17),pch=21,col="black",bg="black",xlab="Critical scale of selection rC", ylab="Patch size as estimated from autocorrelation",xaxs="i",yaxs="i")
abline(lm(b_fit_adapted[newdata_AC$reprS>=0.02] ~ 0 + newdata_AC$Sat0[newdata_AC$reprS>=0.02]),lty=3,lwd=2)
abline(lm(b ~ 0 + data_AC$Sat0),lty=3,lwd=2)  # Add regression line
test = ["abc", "def"]
test = list("abc", "def")
test
test[1]
print(test[1])
test = c("abc","def")
test[1]
print(test[1])
test = as.factor(test)
test[1]
for (folder in inputfolders){
print(folder)
}
## DATA - location ##
inputfolders = c("Data/Gamma02","Data/Gamma021","Data/Gamma022")
for (folder in inputfolders){
print(folder)
}
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.037,0.04,0.045,0.05)
reprS
str(reprS)
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)
paste(inputfolders[1],"/bla")
paste(inputfolders[1],"/bla",sep="")
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
tmin = 200000  # Time periode over which mean Slocal is calculated
tmax = 210000
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
str(seldata)
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
}
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
tmin = 200000  # Time periode over which mean Slocal is calculated
tmax = 210000
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colpname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,tempname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i])
}
}
}
# Loop over all input folders
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
tmin = 200000  # Time periode over which mean Slocal is calculated
tmax = 210000
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i])
}
}
}
Sat0
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
tmin = 200000  # Time periode over which mean Slocal is calculated
tmax = 210000
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i])
break;
}
mean_Slocal_prev = mean_Slocal
}
}
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)  # Values of gamma
Sat0 = vector("numeric")   # Values of critical scale of selection rC
expAC = vector("numeric")  # Values of exponent of autocorrelation (from exponential fit)
# Loop over all input folders
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
tmin = 200000  # Time periode over which mean Slocal is calculated
tmax = 210000
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i])
break;
}
mean_Slocal_prev = mean_Slocal
}
}
Sat0
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)  # Values of gamma
Sat0 = vector("numeric")   # Values of critical scale of selection rC
expAC = vector("numeric")  # Values of exponent of autocorrelation (from exponential fit)
# Settings for Sat0 calculation and autocorrelation fit
tmin = 200000  # Time periode over which mean Slocal is calculated - for calculation of Sat0
tmax = 210000
ACdistances.df = read.table("Data/autocorr_distances.txt",header=F)  # All distances at which the autocorrelation was calculated
ACdistances = c(0,ACdistances.df[,1])  # Add 0 to the list
ACdistances.df = read.table("Data/autocorr_distances.txt",header=F)  # All distances at which the autocorrelation was calculated
str(ACdistances.df)
ACdistances = ACdistances.df[,1]  # Add 0 to the list
str(ACdistances)
folder="Data/Gamma02"
##### Fit exponential function to autocorrelation data (= calculate exponent) #####
ACdata = read.table(paste(folder,"/autocorr_t200000.txt",sep=""),header=T,sep="\t")   # Read data
str(ACdata)
mean_ac = apply(autocorr[,2:ncol(autocorr)],2,mean)
mean_ac = apply(ACdata[,2:ncol(ACdata)],2,mean)
str(mean_ac)
head(ACdata)
length(mean_ac)
length(ACdistances)
mean_ac = apply(ACdata[,3:ncol(ACdata)],2,mean)
length(mean_ac)
ac.df = data.frame(ACdistances,mean_ac)
ACmodel = nls(mean_ac ~ (1+a*exp(b*ACdistances)), data=ac.df, start=list(a=0.1,b=-0.1))  # Fit an exponential decay function to the autocorrelation data
summary(ACmodel)
# plot with the fitted model for a sanity check
plot(ac.df$ACdistances,ac.df$mean_ac,type="p",pch=21,cex=0.25,col="grey30",bg="grey30",main = folder,xlab="Distance (lattice points)",ylab="Autocorrelation")
abline(h=1.0)
lines(acdata$dist,predict(ACmodel),col="purple",lwd=1.5)
lines(ac.df$ACdistances,predict(ACmodel),col="purple",lwd=1.5)
# Add fitted exponent to output vector
expAC = c(expAC, coef(ACmodel)[2])
expAC
inputfolders = c("Data/Gamma02","Data/Gamma021","Data/Gamma022")
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)  # Values of gamma
Sat0 = vector("numeric")   # Values of critical scale of selection rC
expAC = vector("numeric")  # Values of exponent of autocorrelation (from exponential fit)
# Settings for Sat0 calculation and autocorrelation fit
tmin = 200000  # Time periode over which mean Slocal is calculated - for calculation of Sat0
tmax = 210000
ACdistances.df = read.table("Data/autocorr_distances.txt",header=F)  # All distances at which the autocorrelation was calculated
ACdistances = ACdistances.df[,1]  # Vector instead of data frame
# Loop over all input folders
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i-1])        # We say rC is equal to the last r value for which s(r) was positive.
break;
}
mean_Slocal_prev = mean_Slocal
}
##### Fit exponential function to autocorrelation data (= calculate exponent) #####
ACdata = read.table(paste(folder,"/autocorr_t200000.txt",sep=""),header=T,sep="\t")   # Read data
mean_ac = apply(ACdata[,3:ncol(ACdata)],2,mean)  # Calculate the mean autocorr at given distances over several time steps. Do not include distance 0.
ac.df = data.frame(ACdistances,mean_ac)
ACmodel = nls(mean_ac ~ (1+a*exp(b*ACdistances)), data=ac.df, start=list(a=0.1,b=-0.1))  # Fit an exponential decay function to the autocorrelation data
# plot with the fitted model for a sanity check
plot(ac.df$ACdistances,ac.df$mean_ac,type="p",pch=21,cex=0.25,col="grey30",bg="grey30",main = folder,xlab="Distance (lattice points)",ylab="Autocorrelation")
abline(h=1.0)
lines(ac.df$ACdistances,predict(ACmodel),col="purple",lwd=1.5)
# Add fitted exponent to output vector
expAC = c(expAC, coef(ACmodel)[2])
}
# Location of data
inputfolders = c("Data/Gamma02","Data/Gamma021","Data/Gamma022")
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)  # Values of gamma
Sat0 = vector("numeric")   # Values of critical scale of selection rC
expAC = vector("numeric")  # Values of exponent of autocorrelation (from exponential fit)
# Loop over all input folders
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tmin = 200000  # Time periode over which mean Slocal is calculated - for calculation of Sat0
tmax = 210000
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i-1])        # We say rC is equal to the last r value for which s(r) was positive.
break;
}
mean_Slocal_prev = mean_Slocal
}
##### Fit exponential function to autocorrelation data (= calculate exponent) #####
ACdata = read.table(paste(folder,"/autocorr_t200000.txt",sep=""),header=T,sep="\t")   # Read data
ACdistances.df = read.table(paste(folder,"/autocorr_distances.txt",sep=""),header=F)  # Distances at which the autocorrelation was calculated
ACdistances = ACdistances.df[,1]  # Vector instead of data frame
mean_ac = apply(ACdata[,3:ncol(ACdata)],2,mean)  # Calculate the mean autocorr at given distances over several time steps. Do not include distance 0.
ac.df = data.frame(ACdistances,mean_ac)
ACmodel = nls(mean_ac ~ (1+a*exp(b*ACdistances)), data=ac.df, start=list(a=0.1,b=-0.1))  # Fit an exponential decay function to the autocorrelation data
# plot with the fitted model for a sanity check
plot(ac.df$ACdistances,ac.df$mean_ac,type="p",pch=21,cex=0.25,col="grey30",bg="grey30",main = folder,xlab="Distance (lattice points)",ylab="Autocorrelation")
abline(h=1.0)
lines(ac.df$ACdistances,predict(ACmodel),col="purple",lwd=1.5)
# Add fitted exponent to output vector
expAC = c(expAC, coef(ACmodel)[2])
}
expAC
reprS
Sat0
# Location of data
inputfolders = c("Data/Gamma02","Data/Gamma021","Data/Gamma022","Data/Gamma023","Data/Gamma024","Data/Gamma025","Data/Gamma027","Data/Gamma03","Data/Gamma032","Data/Gamma035","Data/Gamma04","Data/Gamma045","Data/Gamma05")
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)  # Values of gamma
Sat0 = vector("numeric")   # Values of critical scale of selection rC
expAC = vector("numeric")  # Values of exponent of autocorrelation (from exponential fit)
# Loop over all input folders
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
print("Calculating Sat0")
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tmin = 200000  # Time periode over which mean Slocal is calculated - for calculation of Sat0
tmax = 210000
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i-1])        # We say rC is equal to the last r value for which s(r) was positive.
break;
}
mean_Slocal_prev = mean_Slocal
}
##### Fit exponential function to autocorrelation data (= calculate exponent) #####
print("Calculating expAC")
ACdata = read.table(paste(folder,"/autocorr_t200000.txt",sep=""),header=T,sep="\t")   # Read data
ACdistances.df = read.table(paste(folder,"/autocorr_distances.txt",sep=""),header=F)  # Distances at which the autocorrelation was calculated
ACdistances = ACdistances.df[,1]  # Vector instead of data frame
mean_ac = apply(ACdata[,3:ncol(ACdata)],2,mean)  # Calculate the mean autocorr at given distances over several time steps. Do not include distance 0.
ac.df = data.frame(ACdistances,mean_ac)
ACmodel = nls(mean_ac ~ (1+a*exp(b*ACdistances)), data=ac.df, start=list(a=0.1,b=-0.1))  # Fit an exponential decay function to the autocorrelation data
# plot with the fitted model for a sanity check
plot(ac.df$ACdistances,ac.df$mean_ac,type="p",pch=21,cex=0.25,col="grey30",bg="grey30",main = folder,xlab="Distance (lattice points)",ylab="Autocorrelation")
abline(h=1.0)
lines(ac.df$ACdistances,predict(ACmodel),col="purple",lwd=1.5)
# Add fitted exponent to output vector
expAC = c(expAC, coef(ACmodel)[2])
}
# Construct data frame with all output
output.df = data.frame(reprS,Sat0,expAC)
# Location of data
inputfolders = c("Data/Gamma02","Data/Gamma021","Data/Gamma022","Data/Gamma023","Data/Gamma024","Data/Gamma025","Data/Gamma027","Data/Gamma03","Data/Gamma032","Data/Gamma035","Data/Gamma04","Data/Gamma045","Data/Default")
# Initialise output vectors
reprS = c(0.02,0.021,0.022,0.023,0.024,0.025,0.027,0.03,0.032,0.035,0.04,0.045,0.05)  # Values of gamma
Sat0 = vector("numeric")   # Values of critical scale of selection rC
expAC = vector("numeric")  # Values of exponent of autocorrelation (from exponential fit)
# Loop over all input folders
for (folder in inputfolders){
print(folder)
##### Calculate Sat0 #####
print("Calculating Sat0")
seldata = read.table(paste(folder,"/selection.txt",sep=""), header=T)       # Read data
tmin = 200000  # Time periode over which mean Slocal is calculated - for calculation of Sat0
tmax = 210000
tvec = which((seldata$Time>=tmin & seldata$Time<=tmax),arr.ind=T)  # Construct vector with time points
Sigma = c(seq(1.0,2.5,0.5), 3:50, seq(60,150,10))   # Values of local neighbourhood sizes tested
mean_Slocal_prev = 0
for (i in 1:length(Sigma)){
curr_sigma = Sigma[i]
colname = paste("Sbelow_",format(round(curr_sigma,2),nsmall = 2),sep="")  # Name of column in dataframe seldata
mean_Slocal = mean(seldata[tvec,colname]) # Calculate mean S_local
# Test if s(r) is zero in this interval
if (mean_Slocal < mean_Slocal_prev){
Sat0 = c(Sat0, Sigma[i-1])        # We say rC is equal to the last r value for which s(r) was positive.
break;
}
mean_Slocal_prev = mean_Slocal
}
##### Fit exponential function to autocorrelation data (= calculate exponent) #####
print("Calculating expAC")
ACdata = read.table(paste(folder,"/autocorr_t200000.txt",sep=""),header=T,sep="\t")   # Read data
ACdistances.df = read.table(paste(folder,"/autocorr_distances.txt",sep=""),header=F)  # Distances at which the autocorrelation was calculated
ACdistances = ACdistances.df[,1]  # Vector instead of data frame
mean_ac = apply(ACdata[,3:ncol(ACdata)],2,mean)  # Calculate the mean autocorr at given distances over several time steps. Do not include distance 0.
ac.df = data.frame(ACdistances,mean_ac)
ACmodel = nls(mean_ac ~ (1+a*exp(b*ACdistances)), data=ac.df, start=list(a=0.1,b=-0.1))  # Fit an exponential decay function to the autocorrelation data
# plot with the fitted model for a sanity check
plot(ac.df$ACdistances,ac.df$mean_ac,type="p",pch=21,cex=0.25,col="grey30",bg="grey30",main = folder,xlab="Distance (lattice points)",ylab="Autocorrelation")
abline(h=1.0)
lines(ac.df$ACdistances,predict(ACmodel),col="purple",lwd=1.5)
# Add fitted exponent to output vector
expAC = c(expAC, coef(ACmodel)[2])
}
# Construct data frame with all output
output.df = data.frame(reprS,Sat0,expAC)
output.df
write.table(output.df,"Data/reprS_Sat0_expAC_test.txt")
